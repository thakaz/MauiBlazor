@page "/employeelist"
@inject I社員Repository 社員repository
<h3>社員リスト</h3>

<FluentTextField @bind-Value=社員番号 Label="社員番号"></FluentTextField>
<FluentTextField @bind-Value=名前 Label="名前"></FluentTextField>
<FluentButton OnClick="社員追加ボタンクリック時">社員追加</FluentButton>

@if (社員s.Count > 0)
{
    foreach (var 社員 in 社員s)
    {
        <FluentStack Style="border: 1px dotted var(--accent-fill-rest)">
            <div class="demopanel">@社員.社員番号</div>
            <div class="demopanel">@社員.名前</div>
            <FluentButton OnClick="()=>社員明細ボタンクリック時(社員)">明細</FluentButton>
        </FluentStack>
    }

}

@code {

    private string? 社員番号 { get; set; }
    private string? 名前 { get; set; }

    IList<社員> 社員s { get; set; } = new List<社員>();

    protected override async Task OnInitializedAsync()
    {
        try
        {
            if (社員repository is not null)
            {
                社員s = (await 社員repository.GetAllAsync()).ToList();
            }
        }
        catch (Exception e)
        {
            Console.WriteLine(e.Message);
        }

    }

    private async Task 社員追加ボタンクリック時(MouseEventArgs args)
    {
        if (string.IsNullOrWhiteSpace(社員番号) || string.IsNullOrWhiteSpace(名前))
        {
            return;
        }

        社員s.Add(new 社員 { 社員番号 = 社員番号, 名前 = 名前 });

        await 社員repository.AddAsync(new 社員 { 社員番号 = 社員番号, 名前 = 名前 });
    }

    private void 社員明細ボタンクリック時(社員 社員)
    {
        NavManager.NavigateTo($"employeedetail/{社員.Id}");
    }

}
