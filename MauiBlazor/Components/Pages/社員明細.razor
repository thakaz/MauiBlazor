@page "/employeedetail/{id:int}"

@inject 打刻Service 打刻Service
@inject I社員打刻Repository 社員打刻Repository
@inject I社員Repository 社員Repository
@inject カード読み取りService カード読み取りService

@implements IDisposable

@using Microsoft.FluentUI.AspNetCore.Components

@inject IJSRuntime JSRuntime

<h3>社員明細</h3>

@if (社員 is null)
{
    <FluentProgressRing></FluentProgressRing>
}
else
{

    <FluentStack>
        <FluentCard>
            <FluentLabel>@社員.社員番号</FluentLabel>
            <FluentLabel>@社員.名前</FluentLabel>
            <FluentLabel>@社員.入社年度</FluentLabel>
            <FluentLabel>@社員.備考</FluentLabel>
        </FluentCard>

        <FluentStack>

            <input type="datetime-local" step="2" @bind-value="打刻時間" />
            <InputDate @bind-Value="打刻時間"></InputDate>
            <FluentButton OnClick="出勤ボタンクリック">
                打刻
            </FluentButton>

            <FluentButton OnClick="打刻リストの更新">
                打刻情報取得
            </FluentButton>

            <FluentButton OnClick="戻るボタン">戻る</FluentButton>

        </FluentStack>

    </FluentStack>


    <FluentDataGrid Items="@(社員打刻s.AsQueryable())" >
        <PropertyColumn Property="@(p => p.Id)" Sortable="true" />
        <PropertyColumn Property="@(p => p.社員番号)" Sortable="true" />
        <PropertyColumn Property="@(p => p.打刻時間)" Sortable="true" />
        <PropertyColumn Property="@(p => p.備考)" Sortable="true" />

        <TemplateColumn Title="削除">
            <FluentButton OnClick="()=>打刻削除(context.Id)" >削除</FluentButton>
        </TemplateColumn>


    </FluentDataGrid>
}

@code {


    [Parameter]
    public int id { get; set; }

    private 社員 社員 { get; set; }

    private DateTime 打刻時間 { get; set; } = DateTime.Now;

    private IList<社員打刻> 社員打刻s { get; set; } = new List<社員打刻>();


    protected override async Task OnInitializedAsync()
    {
        try
        {
            var 社員 = await 社員Repository.GetByIdAsync(id);

            if (社員 is not null)
            {
                this.社員 = 社員;
            }
            else
            {
                throw new Exception("社員が存在しない。");
            }

            カード読み取りService.社員id = id;
            カード読み取りService.読み取り時の処理 = カード読み取りService.読み取り時の処理Code.社員マスタ登録;


        }
        catch (Exception ex)
        {
            await ((Application)app).Windows[0].Page!.DisplayAlert("エラー", "社員が存在しない。" + ex.Message, "OK");
        }
    }

    private async Task 出勤ボタンクリック()
    {

        await 打刻Service.打刻(社員.社員番号, 打刻時間);

        await 打刻リストの更新();
    }


    private async Task 打刻リストの更新()
    {
        社員打刻s = await 社員打刻Repository.GetBy社員番号Async(社員.社員番号); 

    }

    private async Task 戻るボタン()
    {
        await JSRuntime.InvokeVoidAsync("history.back", -1);
    }

    private async Task 打刻削除(int id)
    {
        await 社員打刻Repository.DeleteAsync(id);
        await 打刻リストの更新();
    }

    public void Dispose()
    {
        Console.WriteLine("Dispose");

        カード読み取りService.社員id = null;
        カード読み取りService.読み取り時の処理 = カード読み取りService.読み取り時の処理Code.打刻;
    }

}
