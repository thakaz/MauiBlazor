@page "/employeedetail/{id:int}"
@using System.Text
@implements IDisposable
@attribute [Authorize]
@inject I音声Service 音声Service
@inject 天気Service 天気Service
@inject I通知Service 通知Service
@inject IHttpClientFactory _httpClientFactory

<div class="page-container">
    <div class="page-header">
        <h2>社員明細</h2>
        <FluentButton Appearance="Appearance.Lightweight" OnClick="戻るボタン"
            IconStart="@(new Icons.Regular.Size16.ArrowLeft())">戻る</FluentButton>
    </div>

    @if (社員 is null)
    {
        <div class="loading-container">
            <FluentProgressRing></FluentProgressRing>
        </div>
    }
    else
    {
        <div class="content-container">
            <!-- 社員情報カード -->
            <FluentCard Class="employee-info-card">
                <div class="card-header">
                    <h3>社員情報</h3>
                    <FluentButton Appearance="Appearance.Lightweight" OnClick="メモ追加"
                        IconStart="@(new Icons.Regular.Size16.Edit())">メモ編集</FluentButton>
                </div>
                <div class="employee-info">
                    <div class="info-row">
                        <div class="info-label">社員番号:</div>
                        <div class="info-value">@社員.社員番号</div>
                    </div>
                    <div class="info-row">
                        <div class="info-label">名前:</div>
                        <div class="info-value">@社員.fullName</div>
                    </div>
                    <div class="info-row">
                        <div class="info-label">入社年度:</div>
                        <div class="info-value">@社員.入社年度</div>
                    </div>
                    <div class="info-row">
                        <div class="info-label">備考:</div>
                        <div class="info-value">@(string.IsNullOrEmpty(社員.備考) ? "なし" : 社員.備考)</div>
                    </div>
                    <div class="info-row">
                        <div class="info-label">音声設定:</div>
                        <div class="info-value">
                            @{
                                var 音声タイプ名 = 社員.社員設定 != null ? ((音声タイプ)社員.社員設定.効果音タイプ).ToString() : "システム音";
                            }
                            @音声タイプ名
                            <FluentButton Appearance="Appearance.Lightweight" OnClick="音声テスト"
                                IconStart="@(new Icons.Regular.Size16.Speaker2())">
                                音声テスト
                            </FluentButton>
                        </div>
                    </div>
                </div>
            </FluentCard>

            <!-- 打刻操作カード -->
            <FluentCard Class="attendance-card">
                <div class="card-header">
                    <h3>打刻操作</h3>
                </div>
                <div class="attendance-form">
                    <div class="form-row">
                        <FluentDatePicker @bind-Value="@打刻時間" />
                        <FluentTimePicker @bind-Value="@打刻時間" />
                        <FluentButton Appearance="Appearance.Accent" OnClick="出勤ボタンクリック"
                            IconStart="@(new Icons.Regular.Size16.Clock())">打刻</FluentButton>
                        <FluentButton OnClick="打刻リストの更新" IconStart="@(new Icons.Regular.Size16.ArrowSync())">更新
                        </FluentButton>
                    </div>
                </div>
            </FluentCard>

            <!-- カレンダーと出力カード -->
            <FluentCard Class="calendar-card">
                <div class="card-header">
                    <h3>月次データ</h3>
                    <FluentButton Appearance="Appearance.Accent" OnClick="csvの出力"
                        IconStart="@(new Icons.Regular.Size16.ArrowDownload())">CSVエクスポート</FluentButton>
                </div>
                <div class="calendar-container">
                    <FluentCalendar View="CalendarViews.Months" @bind-Value="@SelectedMonth"
                        @bind-PickerMonth="@PickerMonth" Class="month-calendar" />
                    <div class="calendar-info">
                        <p>選択月: @(SelectedMonth?.ToString("yyyy年MM月") ?? "未選択")</p>
                        <FluentButton Appearance="Appearance.Lightweight" OnClick="() => SelectedMonth = null"
                            IconStart="@(new Icons.Regular.Size16.Delete())">リセット</FluentButton>
                    </div>
                </div>
            </FluentCard>

            <!-- 打刻リストカード -->
            <FluentCard Class="data-grid-card">
                <div class="card-header">
                    <h3>打刻履歴</h3>
                    <div class="card-actions">
                        <span class="record-count">@社員打刻s.Count 件</span>
                    </div>
                </div>
                <FluentDataGrid Items="@(社員打刻s.AsQueryable())" GridTemplateColumns="0.5fr 1fr 2fr 2fr 0.5fr"
                    Class="data-grid">
                    <PropertyColumn Property="@(p => p.Id)" Sortable="true" Title="ID" />
                    <PropertyColumn Property="@(p => p.社員番号)" Sortable="true" Title="社員番号" />
                    <PropertyColumn Property="@(p => p.打刻時間)" Sortable="true" Title="打刻時間" />
                    <PropertyColumn Property="@(p => p.備考)" Sortable="true" Title="備考" />
                    <TemplateColumn Title="操作">
                        <FluentButton Appearance="Appearance.Lightweight" OnClick="() => 打刻削除(context.Id)"
                            IconStart="@(new Icons.Regular.Size16.Delete())">削除</FluentButton>
                    </TemplateColumn>
                </FluentDataGrid>
            </FluentCard>

            <!-- 社員カードリストカード -->
            <FluentCard Class="data-grid-card">
                <div class="card-header">
                    <h3>登録カード</h3>
                    <div class="card-actions">
                        <span class="record-count">@社員カードs.Count 件</span>
                    </div>
                </div>
                <FluentDataGrid Items="@(社員カードs.AsQueryable())" GridTemplateColumns="2fr 1fr 1fr 2fr" Class="data-grid">
                    <PropertyColumn Property="@(p => p.カードUID)" Sortable="true" Title="カードUID" />
                    <PropertyColumn Property="@(p => p.カード名称)" Sortable="true" Title="カード名称" />
                    <PropertyColumn Property="@(p => p.追加日)" Sortable="true" Title="追加日" />
                    <PropertyColumn Property="@(p => p.備考)" Sortable="true" Title="備考" />
                </FluentDataGrid>
            </FluentCard>
        </div>
    }
</div>


@code {
    [Parameter]
    public int id { get; set; }

    private 社員 社員 { get; set; } = null!;

    private DateTime? 打刻時間 { get; set; } = DateTime.UtcNow;

    private IList<社員打刻> 社員打刻s { get; set; } = new List<社員打刻>();
    private IList<社員カード> 社員カードs { get; set; } = new List<社員カード>();

    private DateTime? SelectedMonth = null;
    private DateTime PickerMonth = DateTime.Today;


    protected override async Task OnInitializedAsync()
    {
        try
        {
            var 社員 = await 社員Repository.GetByIdAsync(id);



            if (社員 is not null)
            {
                this.社員 = 社員;
            }
            else
            {
                throw new Exception("社員が存在しない。");
            }

            await 打刻リストの更新();
            await 社員カードリストの更新();


            カード読み取りService.社員id = id;
            カード読み取りService.読み取り時の処理 = 読み取り時の処理Code.社員マスタ登録;


        }
        catch (Exception ex)
        {
            await DisplayAlert.ShowAlertAsync("エラー", "社員が存在しない。" + ex.Message, "OK");
        }
    }

    private async Task 出勤ボタンクリック()
    {
        if (打刻時間 is null)
        {
            await DisplayAlert.ShowAlertAsync("エラー", "打刻時間を入力してください。", "OK");
            return;
        };

        await 打刻Service.打刻(社員.社員番号, 打刻時間.Value);

        await 打刻リストの更新();
    }


    private async Task 打刻リストの更新()
    {
        社員打刻s = await 社員打刻Repository.GetBy社員番号Async(社員.社員番号);
    }

    private async Task 社員カードリストの更新()
    {
        社員カードs = await 社員カードRepository.GetBy社員番号Async(社員.社員番号);
    }

    private async Task 戻るボタン()
    {
        await JSRuntime.InvokeVoidAsync("history.back", -1);
    }

    private async Task 打刻削除(int id)
    {
        await 社員打刻Repository.DeleteAsync(id);
        await 打刻リストの更新();
    }

    public void Dispose()
    {
        Console.WriteLine("Dispose");

        カード読み取りService.社員id = null;
        カード読み取りService.読み取り時の処理 = 読み取り時の処理Code.打刻;
    }


    private async Task csvの出力()
    {
        if (SelectedMonth is null)
        {
            await DisplayAlert.ShowAlertAsync("エラー", "月度を選択してください。", "OK");
            return;
        }

        社員打刻s = await 社員打刻Repository.GetBy社員番号And月度Async(社員.社員番号, DateOnly.FromDateTime(SelectedMonth.Value));

        var csvFilePath = CSVService.WriteCSV(社員打刻s);

        // ファイルをダウンロード
        await fileUtils.SaveFileAsync(csvFilePath, new CancellationToken(), "打刻データ.csv");
    }

    private async Task 音声テスト()
    {
        try
        {
            // 現在の音声タイプを取得
            var 音声タイプ値 = 社員.社員設定 != null ? (音声タイプ)社員.社員設定.効果音タイプ : 音声タイプ.システム音;

            // 傘が必要かどうかを確認
            var 傘が必要 = await 天気Service.傘が必要か(DateOnly.FromDateTime(DateTime.Now));

            // ランダムなセリフを生成
            //呼び方の優先度
            var 呼び方 = 社員.ニックネーム ?? 社員.フリガナ性 ?? 社員.名前性;


            var セリフ = await ランダムセリフ生成(呼び方, 傘が必要);

            // 音声を再生
            await 音声Service.音声再生Async(音声タイプ値, セリフ);

            // 通知を表示
            通知Service.ShowToast(ToastIntent.Info, セリフ);
        }
        catch (Exception ex)
        {
            await DisplayAlert.ShowAlertAsync("エラー", $"音声テストに失敗しました: {ex.Message}", "OK");
        }
    }

    private async Task<string> ランダムセリフ生成(string 社員名, bool 傘が必要)
    {

        var client = _httpClientFactory.CreateClient();
        // ランダムなセリフのリスト
        var response = await client.GetAsync("data/serif.json");
        
        var type = 傘が必要 ? "rain" : "sunny";

        List<string> セリフリスト = new();

        if (response.IsSuccessStatusCode)
        {
            var json = await response.Content.ReadAsStringAsync();
            var serifs = System.Text.Json.JsonSerializer.Deserialize<Dictionary<string, List<string>>>(json);
            セリフリスト = serifs != null && serifs.ContainsKey(type) ? serifs[type] : new List<string>();
        }

        // ランダムにセリフを選択
        var random = new Random();
        return セリフリスト[random.Next(セリフリスト.Count)];
    }


    private async Task メモ追加()
    {
        DialogParameters parameters = new()
        {
            Title = $" 社員情報の編集",
            PrimaryAction = "決定",
            PrimaryActionEnabled = true,
            SecondaryAction = "キャンセル",
            Width = "500px",
            TrapFocus = true,
            Modal = true,
            PreventScroll = true
        };


        var target社員 = await 社員Repository.GetBy社員番号Async(社員.社員番号);

        IDialogReference dialog = await DialogService.ShowDialogAsync<SimpleDialog>(target社員, parameters);
        DialogResult? result = await dialog.Result;

        await 社員Repository.UpdateAsync(target社員);
        await DisplayAlert.ShowAlertAsync("メモ追加", "メモ追加", "OK");
        社員 = target社員;

    }
}
