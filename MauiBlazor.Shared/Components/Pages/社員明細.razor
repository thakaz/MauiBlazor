@page "/employeedetail/{id:int}"

@using System.Text

@implements IDisposable


<h3>社員明細</h3>

@if (社員 is null)
{
    <FluentProgressRing></FluentProgressRing>
}
else
{

    <FluentStack>
        <FluentCard>
            <FluentLabel>@社員.社員番号</FluentLabel>
            <FluentLabel>@社員.名前</FluentLabel>
            <FluentLabel>@社員.入社年度</FluentLabel>
            <FluentLabel>@社員.備考</FluentLabel>
        </FluentCard>

        <FluentStack>

            <input type="datetime-local" step="2" @bind-value="打刻時間" />
            <InputDate @bind-Value="打刻時間"></InputDate>
            <FluentButton OnClick="出勤ボタンクリック">
                打刻
            </FluentButton>

            <FluentButton OnClick="打刻リストの更新">
                打刻情報取得
            </FluentButton>

            <FluentButton OnClick="戻るボタン">戻る</FluentButton>

        </FluentStack>

    </FluentStack>

    <FluentCalendar View="CalendarViews.Months" @bind-Value="@SelectedMonth" @bind-PickerMonth="@PickerMonth" Style="height: 250px;" />
    <p>Selected @(SelectedMonth?.ToString("yyyy-MM-dd"))</p>
    <p>Panel @(PickerMonth.ToString("yyyy-MM-dd"))</p>
    <FluentButton onclick="()=>SelectedMonth=null">日付リセット</FluentButton>


    <FluentButton OnClick="メモ追加">メモ追加</FluentButton>

    <FluentButton OnClick="csvの出力">csvの出力</FluentButton>


    <FluentDataGrid Items="@(社員打刻s.AsQueryable())">
        <PropertyColumn Property="@(p => p.Id)" Sortable="true" />
        <PropertyColumn Property="@(p => p.社員番号)" Sortable="true" />
        <PropertyColumn Property="@(p => p.打刻時間)" Sortable="true" />
        <PropertyColumn Property="@(p => p.備考)" Sortable="true" />

        <TemplateColumn Title="削除">
            <FluentButton OnClick="()=>打刻削除(context.Id)">削除</FluentButton>
        </TemplateColumn>
    </FluentDataGrid>

    <FluentDataGrid Items="@(社員カードs.AsQueryable())">
        <PropertyColumn Property="@(p => p.カードUID)" Sortable="true" />
        <PropertyColumn Property="@(p => p.カード名称)" Sortable="true" />
        <PropertyColumn Property="@(p => p.追加日)" Sortable="true" />
        <PropertyColumn Property="@(p => p.備考)" Sortable="true" />
    </FluentDataGrid>
}


@code {


    [Parameter]
    public int id { get; set; }

    private 社員 社員 { get; set; } = null!;

    private DateTime 打刻時間 { get; set; } = DateTime.Now;

    private IList<社員打刻> 社員打刻s { get; set; } = new List<社員打刻>();
    private IList<社員カード> 社員カードs { get; set; } = new List<社員カード>();

    private DateTime? SelectedMonth = null;
    private DateTime PickerMonth = DateTime.Today;


    protected override async Task OnInitializedAsync()
    {
        try
        {
            var 社員 = await 社員Repository.GetByIdAsync(id);


            if (社員 is not null)
            {
                this.社員 = 社員;
            }
            else
            {
                throw new Exception("社員が存在しない。");
            }

            await 打刻リストの更新();
            await 社員カードリストの更新();


            カード読み取りService.社員id = id;
            カード読み取りService.読み取り時の処理 = 読み取り時の処理Code.社員マスタ登録;


        }
        catch (Exception ex)
        {
            await DisplayAlert.ShowAlertAsync("エラー", "社員が存在しない。" + ex.Message, "OK");
        }
    }

    private async Task 出勤ボタンクリック()
    {

        await 打刻Service.打刻(社員.社員番号, 打刻時間);

        await 打刻リストの更新();
    }


    private async Task 打刻リストの更新()
    {
        社員打刻s = await 社員打刻Repository.GetBy社員番号Async(社員.社員番号);
    }

    private async Task 社員カードリストの更新()
    {
        社員カードs = await 社員カードRepository.GetBy社員番号Async(社員.社員番号);
    }

    private async Task 戻るボタン()
    {
        await JSRuntime.InvokeVoidAsync("history.back", -1);
    }

    private async Task 打刻削除(int id)
    {
        await 社員打刻Repository.DeleteAsync(id);
        await 打刻リストの更新();
    }

    public void Dispose()
    {
        Console.WriteLine("Dispose");

        カード読み取りService.社員id = null;
        カード読み取りService.読み取り時の処理 = 読み取り時の処理Code.打刻;
    }


    private async Task csvの出力()
    {
        if (SelectedMonth is null)
        {
            await DisplayAlert.ShowAlertAsync("エラー", "月度を選択してください。", "OK");
            return;
        }

        社員打刻s= await 社員打刻Repository.GetBy社員番号And月度Async(社員.社員番号, DateOnly.FromDateTime(SelectedMonth.Value));

        var csvFilePath = CSVService.WriteCSV(社員打刻s);

        // ファイルをダウンロード
        await fileUtils.SaveFileAsync(csvFilePath, new CancellationToken(),"打刻データ.csv");
    }

    private async Task メモ追加()
    {
        DialogParameters parameters = new()
            {
                Title = $" 社員情報の編集",
                PrimaryAction = "決定",
                PrimaryActionEnabled = true,
                SecondaryAction = "キャンセル",
                Width = "500px",
                TrapFocus = true,
                Modal = true,
                PreventScroll = true
            };


        var target社員 = await 社員Repository.GetBy社員番号WithRelatedAsync(社員.社員番号);

        IDialogReference dialog = await DialogService.ShowDialogAsync<SimpleDialog>(target社員, parameters);
        DialogResult? result = await dialog.Result;

        await 社員Repository.UpdateAsync(target社員);
        await DisplayAlert.ShowAlertAsync("メモ追加", "メモ追加", "OK");
    }

}
