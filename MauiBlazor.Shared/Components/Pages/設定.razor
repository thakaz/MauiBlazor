@page "/config"
@inject 天気Service 天気Service

<div class="page-container">
    <div class="page-header">
        <h2>設定</h2>
    </div>

    <div class="content-container">
        <!-- 天気設定カード -->
        <FluentCard Class="settings-card">
            <div class="card-header">
                <h3>天気情報設定</h3>
            </div>
            <div class="settings-form">
                <div class="form-group">
                    <FluentTextField @bind-Value=天気Service.都市名 Label="天気場所" Placeholder="例: Tokyo" />
                </div>
                <div class="form-group">
                    <FluentTextField @bind-Value=天気Service.APIキー Label="APIキー" Placeholder="APIキーを入力" />
                </div>
                <div class="form-actions">
                    <FluentButton Appearance="Appearance.Accent" OnClick="天気取得"
                        IconStart="@(new Icons.Regular.Size16.WeatherPartlyCloudyDay())">
                        天気取得
                    </FluentButton>
                </div>
                @if (!string.IsNullOrEmpty(天気情報))
                {
                    <div class="weather-result">
                        <h4>取得結果</h4>
                        <pre>@天気情報</pre>
                    </div>
                }
            </div>
        </FluentCard>

        <!-- 組織設定カード -->
        <FluentCard Class="settings-card">
            <div class="card-header">
                <h3>組織管理</h3>
            </div>
            <div class="settings-form">
                <div class="form-row">
                    <FluentTextField @bind-Value=new組織コード Label="組織コード" Placeholder="組織コードを入力" Required />
                    <FluentTextField @bind-Value=new組織名 Label="組織名" Placeholder="組織名を入力" Required />
                    <FluentTextField @bind-Value=newパスワード Label="パスワード" TextFieldType="TextFieldType.Password"
                        Placeholder="パスワードを入力" Required />
                    <FluentButton Appearance="Appearance.Accent" OnClick="組織追加ボタンクリック時"
                        IconStart="@(new Icons.Regular.Size16.PersonAdd())">
                        組織追加
                    </FluentButton>
                </div>
            </div>
        </FluentCard>

        <!-- 組織一覧カード -->
        <FluentCard Class="data-grid-card">
            <div class="card-header">
                <h3>組織一覧</h3>
                <div class="card-actions">
                    <span class="record-count">@組織s.Count() 件</span>
                </div>
            </div>
            <FluentDataGrid Items="@(組織s.AsQueryable())" GridTemplateColumns="0.5fr 1fr 1.5fr 2fr 0.5fr"
                Class="data-grid">
                <PropertyColumn Property="@(p => p.Id)" Sortable="true" Title="ID" />
                <PropertyColumn Property="@(p => p.組織コード)" Sortable="true" Title="組織コード" />
                <PropertyColumn Property="@(p => p.組織名)" Sortable="true" Title="組織名" />
                <PropertyColumn Property="@(p => p.パスワード)" Sortable="true" Title="パスワード" />
                <TemplateColumn Title="操作">
                    <FluentButton Appearance="Appearance.Lightweight" OnClick="() => 組織削除ボタンクリック時(context)"
                        IconStart="@(new Icons.Regular.Size16.Delete())">
                        削除
                    </FluentButton>
                </TemplateColumn>
            </FluentDataGrid>
        </FluentCard>
    </div>
</div>



@code {
    public string 天気情報 { get; set; } = "";
    private async Task 天気取得()
    {
        天気情報 = "";
        天気情報 = await 天気Service.Get天気Async();
    }

    private IEnumerable<組織> 組織s { get; set; } = new List<組織>();

    private string new組織コード { get; set; } = "";
    private string new組織名 { get; set; } = "";
    private string newパスワード { get; set; } = "";

    protected override async Task OnInitializedAsync()
    {
        組織s = await 組織Repository.GetAllAsync();
    }

    private async Task 組織削除ボタンクリック時(組織 組織)
    {
        await 組織Repository.DeleteAsync(組織.Id);
        組織s = await 組織Repository.GetAllAsync();
    }

    private async Task 組織追加ボタンクリック時(MouseEventArgs args)
    {

        var hashedPassword = PasswordHasher.HashPassword(newパスワード);
        var 組織 = new 組織
        {
            組織コード = new組織コード,
            組織名 = new組織名,
            パスワード = hashedPassword
        };

        await 組織Repository.AddAsync(組織);

        組織s = await 組織Repository.GetAllAsync();


    }

}
