@page "/"
@inject 天気Service 天気Service
@using Microsoft.AspNetCore.Components.Authorization
@inject I音声Service 音声Service

<div class="page-container">
    <div class="page-header">
        <h2>ホーム</h2>
    </div>

    <FluentButton OnClick="音声再生テスト" >再生テスト</FluentButton>

    <div class="content-container">
        <!-- 天気情報カード -->
        <FluentCard Class="weather-card">
            <div class="card-header">
                <h3>今日の天気情報</h3>
            </div>
            <div class="weather-info">
                <div class="weather-date">
                    @DateOnly.FromDateTime(DateTime.Now).ToString("yyyy年MM月dd日")
                </div>
                <div class="weather-status">
                    <div class="weather-icon">
                        @if (傘が必要か)
                        {
                            <FluentIcon Value="@(new Icons.Regular.Size24.WeatherRain())" />
                        }
                        else
                        {
                            <FluentIcon Value="@(new Icons.Regular.Size24.WeatherSunny())" />
                        }
                    </div>
                    <div class="weather-text">
                        <span>傘は</span>
                        <span class="@(傘が必要か ? "needed" : "not-needed")">@(傘が必要か ? "必要" : "不要")</span>
                        <span>です</span>
                    </div>
                </div>
            </div>
        </FluentCard>

        <!-- ステータスカード -->
        <FluentCard Class="status-card">
            <div class="card-header">
                <h3>システム状態</h3>
            </div>
            <div class="status-info">
                <div class="status-row">
                    <div class="status-label">ログイン状態:</div>
                    <div class="status-value">
                        <AuthorizeView>
                            <Authorized>
                                <span class="status-ok">ログイン済み</span>
                            </Authorized>
                            <NotAuthorized>
                                <span class="status-warning">未ログイン</span>
                            </NotAuthorized>
                        </AuthorizeView>
                    </div>
                </div>
                <div class="status-row">
                    <div class="status-label">カード読み取りサービス:</div>
                    <div class="status-value">
                        <span class="@(カード読み取りService.IsMonitoring ? "status-ok" : "status-warning")">
                            @(カード読み取りService.IsMonitoring ? "動作中" : "停止中")
                        </span>
                    </div>
                </div>
                <div class="status-actions">
                    <FluentButton Appearance="Appearance.Accent" OnClick="() => カード読み取りService.LoadCardReader()"
                        IconStart="@(new Icons.Regular.Size16.ArrowSync())">
                        カードリーダー再読み込み
                    </FluentButton>
                    <FluentButton OnClick="ClickMe" IconStart="@(new Icons.Regular.Size16.Alert())">
                        アラートテスト
                    </FluentButton>
                </div>
            </div>
        </FluentCard>
    </div>
</div>


@code {
    private async Task ClickMe()
    {
        await DisplayAlert.ShowAlertAsync("クリック", "クリックされました。", "OK");
    }
    private bool 傘が必要か { get; set; }

    protected override async Task OnInitializedAsync()
    {
        傘が必要か = await 天気Service.傘が必要か(DateOnly.FromDateTime(DateTime.Now));
        await 天気Service.Get天気Async();
    }


    private async Task 音声再生テスト()
    {
        // 音声を再生
        await 音声Service.音声再生Async(音声タイプ.ずんだもん, "ほげほげふがふが、にんじんしりしり。");
    }

}
