@page "/employeelist"
@inject I社員Repository 社員repository
<h3>社員リスト</h3>

<FluentTextField @bind-Value=社員番号 Label="社員番号"></FluentTextField>
<FluentTextField @bind-Value=名前 Label="名前"></FluentTextField>
<FluentButton OnClick="社員追加ボタンクリック時">社員追加</FluentButton>

@if (社員s.Count > 0)
{


    <FluentDataGrid Items="@(社員s.AsQueryable())">
        <PropertyColumn Property="@(p => p.Id)" Sortable="true" />
        <PropertyColumn Property="@(p => p.社員番号)" Sortable="true" />
        <PropertyColumn Property="@(p => p.名前)" Sortable="true" />
        <PropertyColumn Property="@(p => p.入社年度)" Sortable="true" />
        <PropertyColumn Property="@(p => p.備考)" Sortable="true" />
        <TemplateColumn Title="明細">
            <FluentButton OnClick="() => 社員明細ボタンクリック時(context)">明細</FluentButton>
        </TemplateColumn>

        <TemplateColumn Title="削除">
            <FluentButton OnClick="() => 社員削除ボタンクリック時(context)">削除</FluentButton>
        </TemplateColumn>
    </FluentDataGrid>
}

@code {

    private string? 社員番号 { get; set; }
    private string? 名前 { get; set; }

    IList<社員> 社員s { get; set; } = new List<社員>();

    protected override async Task OnInitializedAsync()
    {
        try
        {
            if (社員repository is not null)
            {
                社員s = (await 社員repository.GetAllAsync()).ToList();
            }
        }
        catch (Exception e)
        {
            Console.WriteLine(e.Message);
        }

    }

    private async Task 社員追加ボタンクリック時(MouseEventArgs args)
    {
        try
        {
            if (string.IsNullOrWhiteSpace(社員番号) || string.IsNullOrWhiteSpace(名前))
            {
                return;
            }

            var new社員 = await 社員repository.AddAsync(new 社員 { 社員番号 = 社員番号, 名前 = 名前  });
            社員s.Add(new社員);
        }
        catch (Exception e)
        {
            await DisplayAlert.ShowAlertAsync("エラー", e.Message  + e.InnerException, "OK");
            
        }
    }

    private void 社員明細ボタンクリック時(社員 社員)
    {
        NavManager.NavigateTo($"employeedetail/{社員.Id}");
    }

    private async Task 社員削除ボタンクリック時(社員 社員)
    {
        //一応警告メッセージ
        var result = await DisplayAlert.ShowAlertAsync("削除", "削除しますか？", "OK", "キャンセル");

        if (!result)
        {
            return;
        }

        if (社員 is not null)
        {
            社員s.Remove(社員);
            await 社員repository.DeleteAsync(社員.Id);
        }
    }

}
