@page "/employeelist"
@attribute [Authorize]

<div class="page-container">
    <div class="page-header">
        <h2>社員リスト</h2>
        <p>組織: @(my組織?.組織名 ?? "未選択")</p>
    </div>

    <div class="content-container">
        <FluentCard Class="add-employee-card">
            <div class="card-header">
                <h3>社員追加</h3>
            </div>
            <div class="form-container">
                <div class="form-row">
                    <FluentTextField @bind-Value=社員番号 Label="社員番号" Placeholder="社員番号を入力" Required />
                    <FluentTextField @bind-Value=名前 Label="名前" Placeholder="名前を入力" Required />
                    <FluentButton Appearance="Appearance.Accent" OnClick="社員追加ボタンクリック時">追加</FluentButton>
                </div>
            </div>
        </FluentCard>

        @if (社員s.Count > 0)
        {
            <FluentCard Class="employee-list-card">
                <div class="card-header">
                    <h3>社員一覧</h3>
                    <div class="card-actions">
                        <span class="employee-count">@社員s.Count 名</span>
                    </div>
                </div>
                <FluentDataGrid Items="@(社員s.AsQueryable())" GridTemplateColumns="0.5fr 1fr 1fr 0.8fr 1.5fr 0.5fr 0.5fr"
                    Class="employee-grid">
                    <PropertyColumn Property="@(p => p.Id)" Sortable="true" Title="ID" />
                    <PropertyColumn Property="@(p => p.社員番号)" Sortable="true" Title="社員番号" />
                    <PropertyColumn Property="@(p => p.fullName)" Sortable="true" Title="名前" />
                    <PropertyColumn Property="@(p => p.入社年度)" Sortable="true" Title="入社年度" />
                    <PropertyColumn Property="@(p => p.備考)" Sortable="true" Title="備考" />
                    <TemplateColumn Title="明細">
                        <FluentButton Appearance="Appearance.Lightweight" OnClick="() => 社員明細ボタンクリック時(context)">明細
                        </FluentButton>
                    </TemplateColumn>
                    <TemplateColumn Title="削除">
                        <FluentButton Appearance="Appearance.Lightweight" OnClick="() => 社員削除ボタンクリック時(context)">削除
                        </FluentButton>
                    </TemplateColumn>
                </FluentDataGrid>
            </FluentCard>
        }
        else
        {
            <FluentCard Class="empty-state-card">
                <div class="empty-state">
                    <p>社員データがありません。上のフォームから社員を追加してください。</p>
                </div>
            </FluentCard>
        }
    </div>
</div>


@code {

    private string? 社員番号 { get; set; }
    private string? 名前 { get; set; }

    private string? 組織コード { get; set; }
    private 組織? my組織 { get; set; }

    IList<社員> 社員s { get; set; } = new List<社員>();

    protected override async Task OnInitializedAsync()
    {
        try
        {
            //組織コードを取得
            組織コード = AuthenticationStateProvider.Get組織コード();

            my組織 = await 組織Repository.GetBy組織コードAsync(組織コード);

            社員s = (await 社員Repository.Get組織メンバーAsync(組織コード)).ToList();

        }
        catch (Exception e)
        {
            Console.WriteLine(e.Message);
        }

    }

    private async Task 社員追加ボタンクリック時(MouseEventArgs args)
    {
        try
        {
            if (string.IsNullOrWhiteSpace(社員番号) || string.IsNullOrWhiteSpace(名前))
            {
                return;
            }

            var new社員 = await 社員Repository.AddAsync(new 社員 { 社員番号 = 社員番号, 名前性 = 名前,名前名="", 組織Id = my組織.Id });
            社員s.Add(new社員);
        }
        catch (Exception e)
        {
            await DisplayAlert.ShowAlertAsync("エラー", e.Message + e.InnerException, "OK");

        }
    }

    private void 社員明細ボタンクリック時(社員 社員)
    {
        NavManager.NavigateTo($"employeedetail/{社員.Id}");
    }

    private async Task 社員削除ボタンクリック時(社員 社員)
    {
        //一応警告メッセージ
        var result = await DisplayAlert.ShowAlertAsync("削除", "削除しますか？", "OK", "キャンセル");

        if (!result)
        {
            return;
        }

        if (社員 is not null)
        {
            社員s.Remove(社員);
            await 社員Repository.DeleteAsync(社員.Id);
        }
    }

}
